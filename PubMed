<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PubMed Drug Abstract Search</title>
  <style>
    body { font-family: Arial; padding: 20px; background: #f4f4f4; }
    label { display: block; margin: 10px 0 5px; }
    input, button { padding: 8px; width: 300px; max-width: 100%; margin-bottom: 10px; }
    button { width: auto; background-color: #1E2761; color: white; border: none; cursor: pointer; }
    textarea { width: 100%; height: 300px; margin-top: 15px; padding: 10px; }
  </style>
</head>
<body>

  <h2>PubMed Drug Abstract Search</h2>

  <label>Drug Name:</label>
  <input type="text" id="drugName" placeholder="e.g. Paracetamol">

  <label>From Date (DD/MM/YYYY):</label>
  <input type="text" id="fromDate" value="01/01/2022">

  <label>To Date (DD/MM/YYYY):</label>
  <input type="text" id="toDate" value="31/12/2024">

  <button onclick="searchPubMed()">Search & Download CSV</button>

  <textarea id="output" placeholder="Abstracts will appear here..."></textarea>

  <script>
    function formatDateForPubMed(ddmmyyyy) {
      const parts = ddmmyyyy.split("/");
      if (parts.length !== 3) return null;
      const [dd, mm, yyyy] = parts;
      return `${yyyy}/${mm}/${dd}`;
    }

    async function fetchAllPMIDs(searchTerm) {
      let allIDs = [];
      const retmax = 10000;
      let retstart = 0;

      while (true) {
        const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmax=${retmax}&retstart=${retstart}&term=${encodeURIComponent(searchTerm)}&retmode=json`;
        const res = await fetch(url);
        const data = await res.json();
        const ids = data.esearchresult.idlist;
        allIDs = allIDs.concat(ids);
        if (ids.length < retmax) break;
        retstart += retmax;
      }

      return allIDs;
    }

    async function fetchPubMedDetails(ids) {
      const chunks = [];
      const chunkSize = 200;

      for (let i = 0; i < ids.length; i += chunkSize) {
        const chunk = ids.slice(i, i + chunkSize);
        const efetchURL = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${chunk.join(',')}&retmode=xml`;
        const efetchRes = await fetch(efetchURL);
        const xmlText = await efetchRes.text();
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, "text/xml");
        chunks.push(...xmlDoc.getElementsByTagName("PubmedArticle"));
      }

      return chunks;
    }

    async function searchPubMed() {
      const drug = document.getElementById('drugName').value.trim();
      const fromDate = formatDateForPubMed(document.getElementById('fromDate').value.trim());
      const toDate = formatDateForPubMed(document.getElementById('toDate').value.trim());

      if (!drug || !fromDate || !toDate) {
        alert("Please enter valid drug name and date range in DD/MM/YYYY format.");
        return;
      }

      const searchTerm = `${drug} AND humans[MeSH Terms] AND ("${fromDate}"[Date - Publication] : "${toDate}"[Date - Publication])`;

      const ids = await fetchAllPMIDs(searchTerm);
      if (ids.length === 0) {
        alert("No articles found for the given search.");
        return;
      }

      const articles = await fetchPubMedDetails(ids);

      let csvContent = "PMID,Title,Authors,Journal,Date,Abstract\n";
      let displayText = "";

      for (let article of articles) {
        const title = article.querySelector("ArticleTitle")?.textContent.replace(/"/g, '""') || "";
        const journal = article.querySelector("Journal > Title")?.textContent || "";

        // Format publication date
        const pubDate = article.querySelector("PubDate");
        let day = "01", month = "01", year = "1900";
        if (pubDate) {
          year = pubDate.querySelector("Year")?.textContent || year;
          const monthText = pubDate.querySelector("Month")?.textContent;
          const dayText = pubDate.querySelector("Day")?.textContent;

          const monthMap = {
            Jan: "01", Feb: "02", Mar: "03", Apr: "04", May: "05", Jun: "06",
            Jul: "07", Aug: "08", Sep: "09", Oct: "10", Nov: "11", Dec: "12"
          };

          if (monthText) month = monthMap[monthText] || monthText.padStart(2, '0');
          if (dayText) day = dayText.padStart(2, '0');
        }
        const fullDate = `${day}/${month}/${year}`;

       const abstractElements = article.querySelectorAll("Abstract > AbstractText");
const abstract = Array.from(abstractElements).map(el => el.textContent).join("\n").replace(/"/g, '""');

        const authors = Array.from(article.querySelectorAll("AuthorList > Author"))
          .map(a => `${a.querySelector("LastName")?.textContent || ""} ${a.querySelector("ForeName")?.textContent || ""}`)
          .join("; ");
const pmid = article.querySelector("PMID")?.textContent || "";

       csvContent += `"${pmid}","${title}","${authors}","${journal}","${fullDate}","${abstract}"\n`;

        displayText += `Title: ${title}\nAuthors: ${authors}\nJournal: ${journal}\nDate: ${fullDate}\nAbstract: ${abstract}\n\n`;
      }

      document.getElementById("output").value = displayText;

      // Trigger CSV download
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `${drug.replace(/\s+/g, "_")}_abstracts_${fromDate.replace(/\//g, '-')}_to_${toDate.replace(/\//g, '-')}.csv`;
      link.click();
    }
  </script>

</body>
</html>
